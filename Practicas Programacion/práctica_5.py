# -*- coding: utf-8 -*-
"""Práctica 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1szISf3Z9wRMrZlkm0kQyDviyZGlkqiNl
"""

#Ejercicio 1 a

def ingresarNumeros():
  numeros = []
  while True:
    num = input("Ingrese numero, (* para salir) ")
    if num == "*":
      break
    numeros.append(num)
  return numeros

list = ingresarNumeros()
n = int(input("Ingrese un numero "))
index = -1
for i in range(len(list)):
  if list[i] == n:
    index = i
print(index)

"""
n = int(input("Ingrese un numero "))
for i in numeros:
  if i == n:
    print("El indice de", n, "es ", i)
"""

list = [11, 25, 3, -4, 95]
n = -4
index = -1
for i in range(len(list)):
    if list[i] == n:
        index = i
        break
print(index)

#Ejercicio 1 b
def ingresarNumeros():
  numeros = []
  while True:
    num = input("Ingrese numero, (* para salir) ")
    if num == "*":
      break
    numeros.append(int(num))
  return numeros
list = ingresarNumeros()
print(list)
min = list[0]
max = list[0]
print(list[0])
for num in list[1:]:
  if num < min:
    min = num
  elif num > max:
    max = num
print(min, max)

#Ejercicio 1 c

numeros = [1, 2, 3, 4, 5]

for i in range(len(numeros)):
  numeros[i] = numeros[i] + 1
print(numeros)

#Ejercicio 1 d

palabras = ["arbol ", "barco ", "artificial ", "casa ", "dado ", "a"]

for i in palabras:
  if i[0] == "a":
    print(i)

#Ejercicio 1 e
suma = 0
producto = 1
numeros = [0 ,1 ,2 ,3 ,4 ,5]
for i in range(0, len(numeros), 2):
  suma = numeros[i] + suma
print(suma)

for i in range(1, len(numeros), 2):
  producto = numeros[i] * producto
print(producto)

#Ejercicio 1 f

numeros = [0 ,1 ,2 ,3 ,4 ,5]

for i in range(len(numeros)-1, 0, -1):
  print(numeros[i])

#Ejercicio 2

def ingresarNumeros():
  numeros = []
  while True:
    num = input("Ingrese numero, (* para salir) ")
    if num == "*":
      break
    numeros.append(int(num))
  return numeros
list = ingresarNumeros()
lista = []
contador = 0
for i in list:
  contador = i + contador
  lista.append(contador)
print(contador)
print(lista)

# Ejercicio 3
contador = 1
lista = [1, 2, 3, 1, 2, 5, 6]
for i in range(len(lista)):
  if lista[i] in lista[i+1:]:
    contador += 1
    print("El numero ", lista[i]," se repitio ", contador," veces" )

#Ejercicio 4
n = 10

fibonacci = [0, 1]
for i in range(2, n):
  x = fibonacci[i-1] + fibonacci[i-2]
  fibonacci.append(x)

print(fibonacci)

#Ejercicio 5 a

datos_personales = []
nombre = input("Ingrese su nombre ")
apellido = input("Ingrese su apellido ")
localidad = input("Ingrese su localidad ")
edad = input("Ingrese su edad ")
dni = input("Ingrese su DNI ")
carrera = input("Ingrese la carrera ")
año_de_inicio = input("Ingrese año de inicio ")
datos_personales.append(nombre)
datos_personales.append(apellido)
datos_personales.append(localidad)
datos_personales.append(edad)
datos_personales.append(dni)
datos_personales.append(carrera)
datos_personales.append(año_de_inicio)
print(datos_personales)

#Ejercicio 5 b
datos_personales = []
nombre = input("Ingrese su nombre ")
apellido = input("Ingrese su apellido ")
localidad = input("Ingrese su localidad ")
edad = int(input("Ingrese su edad "))
dni = input("Ingrese su DNI ")
carrera = input("Ingrese la carrera ")
año_de_inicio = int(input("Ingrese año de inicio "))
años_cursando = 2023 - año_de_inicio
datos_personales.append(nombre)
datos_personales.append(apellido)
datos_personales.append(localidad)
datos_personales.append(edad)
datos_personales.append(dni)
datos_personales.append(carrera)
datos_personales.append(año_de_inicio)
datos_personales.append(años_cursando)
print(datos_personales)
print("El alumno ", datos_personales[0], "lleva cursando ", datos_personales[-1], "años")

#Ejercicio 5 c

def ingresarDatos()->lista:
  datos_personales = []
  nombre = input("Ingrese su nombre ")
  apellido = input("Ingrese su apellido ")
  localidad = input("Ingrese su localidad ")
  edad = int(input("Ingrese su edad "))
  dni = input("Ingrese su DNI ")
  carrera = input("Ingrese la carrera ")
  año_de_inicio = int(input("Ingrese año de inicio "))
  años_cursando = 2023 - año_de_inicio
  datos_personales.append(nombre)
  datos_personales.append(apellido)
  datos_personales.append(localidad)
  datos_personales.append(edad)
  datos_personales.append(dni)
  datos_personales.append(carrera)
  datos_personales.append(año_de_inicio)
  datos_personales.append(años_cursando)
  return datos_personales
basedatos = []
a = input("Quiere ingresar datos de estudiantes? 'si' o 'no'")
while a.lower() == 'si':
  x = ingresarDatos()
  basedatos.append(x)
  a = input("Quiere ingresar datos de estudiantes? 'si' o 'no'")

print(basedatos)

#Ejercicio 5 d

def ingresarDatos()->lista:
  datos_personales = []
  nombre = input("Ingrese su nombre ")
  apellido = input("Ingrese su apellido ")
  localidad = input("Ingrese su localidad ")
  edad = int(input("Ingrese su edad "))
  dni = input("Ingrese su DNI ")
  carrera = input("Ingrese la carrera ")
  año_de_inicio = int(input("Ingrese año de inicio "))
  años_cursando = 2023 - año_de_inicio
  datos_personales.append(nombre)
  datos_personales.append(apellido)
  datos_personales.append(localidad)
  datos_personales.append(edad)
  datos_personales.append(dni)
  datos_personales.append(carrera)
  datos_personales.append(año_de_inicio)
  datos_personales.append(años_cursando)
  return datos_personales


basedatos = []
a = input("Quiere ingresar datos de estudiantes? 'si' o 'no'")
while a.lower() == 'si':
  x = ingresarDatos()
  basedatos.append(x)
  a = input("Quiere ingresar datos de estudiantes? 'si' o 'no' ")

print(basedatos)

for i in basedatos:
  i[5] = "TUIA"
print(basedatos)

basedatos = [['david', '1', '1', 1, '1', '1', 1, 2022], ['2', '2', '2', 2, '2', '2', 2, 2021]]
print(basedatos)

for i in basedatos:
  i[5] = "TUIA"
print(basedatos)

print("El alumno ", basedatos[0][0], "lleva cursando ", basedatos[0][-1], "años")

#Ejercicio 6 a
trebol = ('A', 2, 3, 4, 5, 6, 7, 8, 9, 'J', 'Q', 'K')
hoja = ('A', 2, 3, 4, 5, 6, 7, 8, 9, 'J', 'Q', 'K')
diamantes = ('A', 2, 3, 4, 5, 6, 7, 8, 9, 'J', 'Q', 'K')
corazones = ('A', 2, 3, 4, 5, 6, 7, 8, 9, 'J', 'Q', 'K')
cartas = (trebol, hoja, diamantes, corazones)
print(cartas)

from random import shuffle
# Primero definimos las posibles opciones de palos y números
palos = ("Picas", "Corazones", "Diamantes", "Tréboles")
numeros = ("As", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K")

# Luego, creamos una lista de tuplas que representan las cartas
baraja = []
for palo in palos:
    for numero in numeros:
        carta = (numero, palo)
        baraja.append(carta)

contador = 0

shuffle(baraja)
mano = [('5', 'Tréboles'), ('9', 'Tréboles'), ('9', 'Picas'), ('9', 'Diamantes'), ('9', 'Diamantes')]
"""baraja[:5]"""
print(mano)

for i in range(1, len(mano)):
  if  mano[0][0] == mano[i][0]:
    contador += 1
    if contador == 4:
      print("Es poker")
      break
  elif mano[1][0] == mano[i][0]:
    contador += 1
    if contador == 4:
      print("Es poker")
      break
  else:
    print("No es poker")

lista=["a", "b", "c", "d", "e"]
sub_lista = lista[-2:-1]
print(sub_lista)

from random import shuffle
# Primero definimos las posibles opciones de palos y números
palos = ("Picas", "Corazones", "Diamantes", "Tréboles")
numeros = ("As", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K")

# Luego, creamos una lista de tuplas que representan las cartas
baraja = []
for palo in palos:
    for numero in numeros:
        carta = (numero, palo)
        baraja.append(carta)

contador = 0
shuffle(baraja)
mano = baraja[:5]
print(mano)
for i in mano:
  if mano.count(i) == 4:
    contador += 1
    if contador == 4:
      print("Es poker")
      break
  else:
    print("No es poker")
    break

#Ejercicio 7

def sumar_tiempos(tiempo1, tiempo2):
    segundos_totales = (tiempo1[2] + tiempo2[2]) % 60
    minutos_totales = ((tiempo1[1] + tiempo2[1]) % 60) + ((tiempo1[2] + tiempo2[2]) // 60)
    horas_totales = ((tiempo1[0] + tiempo2[0]) % 24) + ((tiempo1[1] + tiempo2[1]) // 60)
    return (horas_totales, minutos_totales, segundos_totales)

horas = int(input("Ingrese las horas: "))
minutos = int(input("Ingrese los minutos: "))
segundos = int(input("Ingrese los segundo: "))

tiempo1 = (horas, minutos, segundos)
print(tiempo1)

horas = int(input("Ingrese las horas: "))
minutos = int(input("Ingrese los minutos: "))
segundos = int(input("Ingrese los segundo: "))

tiempo2 = (horas, minutos, segundos)
print(tiempo2)

x = sumar_tiempos(tiempo1, tiempo2)
print(x)

#Ejercicio 8

def sumar_dia(fecha):
    dia, mes, año = fecha
    if dia >= 30:
      dia = 1
      mes += 1
      if mes > 12:
        mes = 1
        año += 1
    else:
      dia += 1
    return dia, mes, año


dia = int(input("Ingrese dia: "))
mes = int(input("Ingrese el mes: "))
año = int(input("Ingrese el año: "))

fecha = (dia, mes, año)
print(fecha)

x = sumar_dia(fecha)
print(x)

#Ejercicio 9
def sumar_dia(fecha):
  dia, mes, año = fecha
  if dia >= 30:
    dia = 1
    mes += 1
    if mes > 12:
      mes = 1
      año += 1
  else:
    dia += 1
  return dia, mes, año

def dias_str(mes):
  meses = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"]
  for i in range(len(meses)):
    if mes == i+1:
      mes = meses[i]
  return mes

dia = int(input("Ingrese dia: "))
mes = int(input("Ingrese el mes: "))
año = int(input("Ingrese el año: "))

mes = dias_str(mes)
fecha = (dia, mes, año)
print(fecha)

mes = dias_str(mes)
x = sumar_dia(fecha)
print(x)

#Ejercicio 10

dolarBlue = ( "189","1930","187","210","202")

lista = []
for i in dolarBlue:
  lista.append(i)

lista[1] = "193"

tuple(lista)
print(lista)

SMVM = 84512

personas = [("12345678", 75000), ("23456789", 90000), ("34567890", 780000), ("45678901", 80000)]

for persona in personas:
  if persona[1] < SMVM:
    print("La persona con DNI", persona[0], "tiene un ingreso menor que 84000")
  elif persona[1] > SMVM and persona[1] < 2*SMVM:
    print("La persona con DNI", persona[0], "tiene un ingreso superior que el minimo e inferior a dos minimos")
  elif persona[1] > 2*SMVM and persona[1] < 4*SMVM:
    print("La persona con DNI", persona[0], "tiene un ingreso entre dos y cuatro minimos")
  else:
    print("La persona con DNI", persona[0], "tiene un ingreso mayor a cuatro minimos")


resultado = [
    ("ingreso menor al minimo",   0),
    ("ingreso superior que el minimo e inferior a dos minimos", 0),
    ("ingreso entre dos y cuatro minimos", 0),
    ("ingreso mayor a cuatro minimos",   0),
]

for (dni, ingreso) in personas:
  print(dni, ingreso)
  if ingreso < SMVM:
    (rango, cantidad) = resultado[0]
    resultado[0] = (rango, cantidad + 1)
  elif ingreso > SMVM and ingreso < 2*SMVM:
    (rango, cantidad) = resultado[0]
    resultado[1] = (rango, cantidad + 1)
  elif ingreso > SMVM*2 and ingreso < 4*SMVM:
    (rango, cantidad) = resultado[0]
    resultado[2] = (rango, cantidad + 1)
  else:
    (rango, cantidad) = resultado[0]
    resultado[3] = (rango, cantidad + 1)

print(resultado)

# Definir el valor del salario mínimo, vital y móvil (SMVM) en función del año actual
SMVM = 30000  # Supongamos que el SMVM es de $30,000 para este ejemplo

# Lista de tuplas con el DNI de la persona y su ingreso
personas = [("12345678", 25000), ("23456789", 35000), ("34567890", 45000), ("45678901", 55000), ("56789012", 65000), ("67890123", 75000), ("78901234", 85000), ("89012345", 95000)]

# Definir los rangos de ingresos y el contador para cada rango
rangos = [("Menor que SMVM", 0), ("Entre 1 y 2 SMVM", 0), ("Entre 2 y 4 SMVM", 0), ("Mayor que 4 SMVM", 0)]

# Iterar sobre cada persona en la lista y clasificar su ingreso en el rango correspondiente
for persona in personas:
    ingreso = persona[1]
    if ingreso < SMVM:
        rangos[0] = (rangos[0][0], rangos[0][1] + 1)
    elif SMVM <= ingreso < 2*SMVM:
        rangos[1] = (rangos[1][0], rangos[1][1] + 1)
    elif 2*SMVM <= ingreso < 4*SMVM:
        rangos[2] = (rangos[2][0], rangos[2][1] + 1)
    else:
        rangos[3] = (rangos[3][0], rangos[3][1] + 1)

# Imprimir los resultados
print(rangos)

#Ejercicio 12
frase = input("Ingrese una frase ")
lista = frase.split()
print(lista)
dicc = {}
for i in lista:
  dicc[i] = lista.count(i)

print(dicc)

#Ejercicio 13
def ingresarDatos():
  lista = []
  while True:
    nombre = input("Ingrese el nombre del alumno: ('*' para salir)")
    if nombre == "*":
      break
    nota = float(input("Ingrese la nota del alumno: "))
    tupla = (nombre, nota)
    lista.append(tupla)
  return lista

lista = ingresarDatos()

print(lista)

diccionario_notas = {}
for i in lista:
  dicc[i[0]] = i[1]

for nombre, notas in lista:
  if nombre not in diccionario_notas:
    diccionario_notas[nombre] = []
  diccionario_notas[nombre].append(notas)

print(diccionario_notas)

dicc2 = {}
for nombre, notas in lista:
  if notas not in dicc2:
    dicc2[notas] = []
  dicc2[notas].append(nombre)
print(dicc2)

# Ejercicio 14

alumnos = {"Juan": [6 ,9 ,8] , "Manuel": [9 ,10 ,9] , "Martin": [5 ,6 ,7]}

for clave in alumnos:
  contador = 0
  for i in alumnos[clave]:
    contador += i
    promedio = contador/len(alumnos[clave])
  print("El promedio de",clave,"fue de",promedio)

#Ejercicio 15

alumnos = {"Juan": [6 ,9 ,8] , "Manuel": [9 ,10 ,9] , "Martin": [5 ,6 ,7]}
dicc = {}

for clave in alumnos:
  contador = 0
  for i in alumnos[clave]:
    contador += i
    promedio = contador/len(alumnos[clave])
  print("El promedio de",clave,"fue de",promedio)
  dicc[clave] = promedio
print(dicc)

#Ejercicio 16

nombres = ["Joana", "Ramiro", "Josefina", "Alberto"]
edades = [13, 14, 15, 16]


"""dicc = {}
for i in range(len(nombres)):
  dicc[nombres[i]] = edades[i]
print(dicc)"""


diccionario_personas = dict(zip(nombres, edades))
print(diccionario_personas)

#Ejercicio 17

diccionario = {"3124342": 3, "1422354235": 1, "2131244": 2}
info = []
for key, value in diccionario.items():
  if value == 2:
    info.append(key)

print(info)

#Ejercicio 18

morse = {
'A': '. -', 'B': ' -... ', 'C': ' -. -. ',
'D': ' -.. ', 'E': '.', 'F': '.. -. ',
'G': ' - -.', 'H': '.... ', 'I': '.. ',
'J': '. - - -', 'K': ' -. -', 'L': '. -.. ',
'M': '--', 'N': ' -.', 'O': '---',
'P': '. - -. ', 'Q': ' - -. -', 'R': '. -. ',
'S': '... ', 'T': '-', 'U': '.. - ',
'V': '... - ', 'W': '. - -', 'X': ' -.. - ',
'Y': ' -. - -', 'Z': ' - -.. ', '1': '. - - - -',
'2': '.. - - - ', '3': '... - - ', '4': '.... - ',
'5': '..... ', '6': ' -.... ', '7': ' - -... ',
'8': ' - - -.. ', '9': ' - - - -.', '0': ' -----',
'.': '. -. -. - ', ',': ' - -.. - - ', ':': ' - - -... ',
';': ' -. -. -. ', '?': '.. - -.. ', '!': ' -. -. - - ',
'"': '. -.. -. ', "'": '. - - - -. ', '+': '. -. -. ',
'-': ' -.... - ', '/': ' -.. -. ', '=': ' -... - ',
'_': '.. - -. - ', '$': '... -.. - ', '@': '. - -. -. ',
'&': '. -... ', '(': ' -. - -. ', ')': ' -. - -. - '
}

codigo = ['.', ' -.', '.. - -. - ', '.', '. -.. ', '.. - -. - ', '.. -. ', '.. - ', '-', '.. - ',
'. -. ', '---', '.. - -. - ', '.', '... ', '.. - -. - ', '. - -. ', '---', '... ',
'.. ', ' -... ', '. -.. ', '.', '.. - -. - ', ' - -. -', '.. - ', '.', '.. - -. - ',
'. -.. ', '---', '... ', '.. - -. - ', '---', '. -. ', ' -.. ', '.', ' -.',
'. -', ' -.. ', '---', '. -. ', '.', '... ', '.. - -. - ', ' -.', '---',
'.. - -. - ', '. - -. ', '.', '... ', '.', ' -.', '.. - -. - ', '--', '. -',
'... ', '.. - -. - ', ' -.. ', '.', '.. - -. - ', '. - - - -', ' - -.. - - ', '..... ',
'.. - -. - ', '-', '---', ' -.', '.', '. -.. ', '. -', ' -.. ', '. -', '... ',
'. -. -. - ', '.. - -. - ', ' -.... - ', ' -.... - ', '.. - -. - ', '. - -. ', '---',
'. - -. ', '.. - ', '. -.. ', '. -', '. -. ', '.. - -. - ', '--', '.', ' -. -. ',
'.... ', '. - -. ', '.. ', ' -. -. ', '... ', ' - -.. - - ', '.. - -. - ', '. - - - -',
' - - - -.', '.... - ', ' - - - -.', ' - - -... ']
traduccion = []
for i in codigo:
  for key, value in morse.items():
    if i == value:
      i = key
      traduccion.append(i)
print(" ".join(traduccion))

#Ejercicio 19

com1 = {'legajo_11 ': [6 , 7 , 8], 'legajo_1m ': [3 , 8 , 9]}
com2 = {'legajo_21 ': [6 , 7 , 8], 'legajo_2n ': [3 , 8 , 9]}
com3 = {'legajo_31 ': [6 , 7 , 8], 'legajo_3j ': [3 , 8 , 9]}
com4 = {'legajo_41 ': [6 , 7 , 8], 'legajo_4k ': [3 , 8 , 9]}

com1.update(com2)
com1.update(com3)
com1.update(com4)

print(com1)

for legajo, notas in com1.items():
    print(legajo + ':', notas)