# -*- coding: utf-8 -*-
"""T.P. Programación 1 (Previajes).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pMl9U1We0_AOyLEfls4qG6riktss009i

# **TRABAJO PRÁCTICO FINAL**

| Integrantes | Legajo|
| ----- | --- |
|Palandri, David Jose | P-5240/1 |
|Gigli, Juan Cruz | G-5956/1 |
|Welschen, Joaquín   | W-0563/1 |

# Archivos

## Descarga
"""

!gdown 1WWvf6yn5oS1xarapKnwr3s8l2wKWtd7d # releer colab csv
!gdown 1NsCSeCb50vqTqk1fC1IuGVhx_j9QQObG

"""## Lectura"""

# Esto permite acceder a las clases
# y funciones proporcionadas por el módulo csv.
import csv

def openFile(nombre_archivo: str) -> (list, tuple):
  """
  Lee datos del archivo de entrada y retorna
  una lista con la información que se va a usar en el trabajo
  junto con el encabezado como una tupla.
  """
  # csv.DictReader
  # Insertar función creada en clase
  lista = []

  with open(nombre_archivo, 'r') as datos:
  # la clase csv.reader que permite
  # leer los datos de un archivo CSV línea por línea.
    archivo = csv.reader(datos)
    encabezado = tuple(next(archivo))
    for fila in archivo:
      lista.append(fila)

  return lista, encabezado

"""# Enunciado 1
- Leer el archivo 'coordenadas_provincias.csv' que se encuentra en esta dirección: \
  `
  https://drive.google.com/file/d/1WWvf6yn5oS1xarapKnwr3s8l2wKWtd7d/view?usp=drive_link
  `
- Crear la función listToDict que se encarga de convertir los datos leídos a una lista de diccionarios.
- Llamar a la función anterior con los datos del archivo leído y verificar que devuelva lo pedido.
- Crear el constructor de la clase 'Provincia'
- Crear un objeto de la clase 'Provincia'

"""

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

def validarProvincia(provincia: str)->bool:
  provincia = provincia.lower() #.lower() es para que compare bien con los datos del dataset.
  provincias_argentinas = ["buenos aires", "ciudad autónoma de buenos aires", "catamarca", "chaco", "chubut", "cordoba",
                           "corrientes", "entre rios", "formosa", "jujuy", "la pampa", "la rioja", "mendoza", "misiones",
                           "neuquen", "rio negro", "salta", "san juan", "san luis", "santa cruz", "santa fe",
                           "santiago del estero", "tierra del fuego", "tucuman"]
  if provincia not in provincias_argentinas:
    print("Nombre de provincia inválido")
    return True
  else:
    return False

def listToDict(datos: list, encabezado=True)->list[dict]:
  """
  Toma el resultado de la lectura de datos como argumento y devuelve una lista
  de diccionarios.
  Tiene un argumento 'encabezado' por defecto.
  La clave es el valor en el índice 0, y los valores asociados son una tupla
  con el resto de los elementos de la lista.
  """
  lista = []
  for fila in datos:
    clave = fila[0]
    valores = tuple(fila[1:])
    diccionario = {clave: valores}
    lista.append(diccionario)

  return lista

def listToDict_2(datos: list, encabezados: tuple)->list[dict]:
  """
  Toma una lista datos como argumento y devuelve una lista
  de diccionarios.
  Donde cada diccionario representa una fila de datos y las claves del diccionario corresponden
  a los encabezados y los valores son las columnas.
  """

  lista = []
  for fila in datos:
    diccionario = {}
    for i in range(len(encabezados)):  #El range es necesario para tomar el indice de fila
      diccionario[encabezados[i]] = fila[i].lower() #.lower() es para favorecer el parseo en otras funciones
    lista.append(diccionario)

  return lista

"""Ejemplo de salida de la función `listToDict()`:

```python
provincias = [{'Buenos Aires':('-34.6037', '-58.3816')},
              {'CABA':('-34.6158', '-58.4333')}
              ...]
```

# Enunciado 2
*    Leer el archivo que se encuentra en esta dirección:
https://datos.yvera.gob.ar/dataset/09679fe3-7379-481d-a36a-6b1e3d7374b1/archivo/9d4db872-0a51-4042-9daa-e55bc7a3044c
    como 'previaje.csv'
*    Proponer 2 estructuras de datos para trabajar los dataset. (Pueden ser distintos)
*    Crear el constructor de la clase 'Viaje'
*    Crear un objeto de la clase 'Viaje'
*    Crear una función 'datos_relevantes' que sólo devuelva (con la misma estructura de datos que se está trabajando) los datos de determinados encabezados pasados como parámetros.
*    Crear una función 'mas_viajeros' que calcule cual fue la provincia que más viajeros recibio, en un mes y año indicados como parámetros.
*    Crear una función  'calcular_promedio' que calcule el promedio de viajeros por viaje en una provincia de origen especifica.
"""

def datos_relevantes(datos: list, *encabezados: tuple)->list:
  """
  Devuelve los datos de determinados encabezados pasados como parámetros.
  """
  datos_filtrados = []
  for fila in datos:
    datos_fila = {}
    for encabezado in encabezados:
      if encabezado in fila:
        datos_fila[encabezado] = fila[encabezado]
    datos_filtrados.append(datos_fila)
  return datos_filtrados

def mas_viajeros(datos: list, mes: str, anio: int)-> (str, int):
  """
  Calcula cual fue la provincia que más viajeros recibio, en un mes y año indicados como parámetros.
  """
  viajeros_por_provincia = {}
  for dato in datos:
    fecha = dato['\ufeffmes_inicio']
    provincia_destino = dato['provincia_destino']
    viajeros = int(dato['viajeros'])

  # Verifica si coincide el mes y año
    if fecha == f"{anio}-{mes}":
      if provincia_destino in viajeros_por_provincia:
        viajeros_por_provincia[provincia_destino] += viajeros
      else:
        viajeros_por_provincia[provincia_destino] = viajeros

  max_valor = 0
  for clave, valor in viajeros_por_provincia.items():
    if valor > max_valor:
      max_valor = valor
      clave_max_valor = clave

  print(f"La provincia que recibió más viajeros en {mes}-{anio} fue {clave_max_valor} con {max_valor} viajeros.")

  return clave_max_valor, max_valor

def calcular_promedio(datos: list, provincia_origen: str) -> float:
  """
  Calcula el promedio de viajeros por viaje en una provincia de origen especifica.
  """
  if validarProvincia(provincia_origen):
    return

  total_viajes = 0
  total_viajeros = 0
  for fila in datos:
    if fila['provincia_origen'] == provincia_origen:
      total_viajes += int(fila['viajes'])
      total_viajeros += int(fila['viajeros'])

  promedio = total_viajeros / total_viajes
  print(f"El promedio de viajeros por viaje en {provincia}, fue de {promedio}")

  return promedio

"""# Enunciado 3

En esta última etapa deberán:

● Usar los datos del archivo 'previaje.csv' para cargar una estructura de datos que consideren adecuada los datos que consideren pertinentes para responder la siguiente pregunta: ¿cuántos viajes fueron realizados en cada edición del programa PreViaje?

● Realizar un gráfico de torta que muestre los porcentajes de viajes correspondientes a cada edición, sobre el total de viajes del programa completo. Para ello deberán usar los módulos matplotlib y seaborn. Use los ejemplos publicados como guía.
"""

def calculaEdicionPreviaje(datos: list[dict]) -> tuple:
  """
  Calcula cuantos viajes fueron realizados en cada edición del programa PreViaje.
  """
  edicion_1 = 0
  edicion_2 = 0
  edicion_3 = 0
  for i in datos:
    if i['edicion'] == 'previaje 1':
      edicion_1 += 1
    elif i['edicion'] == "previaje 2":
      edicion_2 += 1
    else:
      edicion_3 += 1

  return edicion_1, edicion_2, edicion_3

def dibujar_grafico_torta(titulo, etiquetas, porcentajes):
  plt.figure(figsize = (15,6)) #para dar las dimensiones de la figura (ojo que debe ir arriba)
  plt.title(titulo, fontsize=25) #titulo del gráfico y tamaño de la fuente
  plt.pie(porcentajes, labels  = etiquetas, autopct="%0.1f %%") #autopct="%0.1f %%" hace que aparezcan
  # los porcentajes dentro de cada parte de la torta

"""# Clases

## Clase Provincia
"""

class Provincia:
  """
  Esta clase representa una provincia.
  Atributos:
    nombre: str
    coordenada: tuple
  """
  def __init__(self, nombre, coordenada):
        self.nombre = nombre
        self.coordenada = coordenada

  def __str__(self):
      return f"Provincia: {self.nombre}, Coordenada: {self.coordenada}"

"""## Clase Viaje

1. Crear el constructor de la clase Viaje. Sus atributos serán:
- mes_inicio
- provincia_origen
- provincia_destino
- viajes
- viajeros
- edicion
2. Crear un metodo \_\_str_\_ que devuelva los datos del viaje bien formateados.
"""

class Viaje:
    """
    Esta clase representa un viaje,
    contiene los datos relevantes al análisis.
    """
    def __init__(self, mes_inicio, provincia_origen, provincia_destino, viajes, viajeros, edicion):
        self.mes_inicio = mes_inicio
        self.provincia_origen = provincia_origen
        self.provincia_destino = provincia_destino
        self.viajes = viajes
        self.viajeros = viajeros
        self.edicion = edicion

    def __str__(self):
      return f"Mes de inicio: {self.mes_inicio}, Provincia de origen: {self.provincia_origen}, Provincia de destino: {self.provincia_destino}, viajes: {self.viajes}, viajeros: {self.viajeros}, edición: {self.edicion}"

"""# Programa principal"""

# Leo los datasets con la funcion openFile y saco el encabezado.
coordenadas, encabezado_coordenadas = openFile('coordenadas_provincias.csv')
dataset_previajes, encabezado_viaje = openFile('viajes_origen_destino_mes.csv')


# Llamo a listToDict para generar la lista de diccionarios con coordenadas.
viajes = listToDict(coordenadas, encabezado=True)


# Lamo a listToDict_2 para generar la estructura de datos de previajes.
# Es una lista de diccionarios con 6 elementos con las claves como los
# valores del encabezado del dataset.
previajes = listToDict_2(dataset_previajes, encabezado_viaje)
# for i in range(0, 1, 1):
#   print(previajes[i])

#Desempaqueto la tupla de encabezado_viaje
mes_inicio, provincia_origen, provincia_destino, viajes, viajeros, edicion = encabezado_viaje


# Llamo a datos_relevantes y le ingreso como parametro el dataset previajes
# y los parametros de los encabezados queridos.
datos_deseados = datos_relevantes(previajes, viajes)


# Ingreso mes y anio y llamo a la funcion 'mas_viajeros'
mes = input("Ingrese el mes (formato 01): ")
anio = int(input("Ingrese el anio (2021 o 2022): "))
provincia_mas_viajeros, viajeros = mas_viajeros(previajes, mes, anio)


# Llamo a la funcion calcular_promedio
provincia = input("Ingrese el nombre de una provincia para concocer el promedio: ").lower()
promedio = calcular_promedio(previajes, provincia)


# Para trabajar con edicionPreviajes llamo a la funcion datos_relevantes y le ingreso como parametro edicion.
# edicion_previaje almacena la columna del diccionario con clave edicion.
edicion_previaje = datos_relevantes(previajes, edicion)

# Llamo a la funcion edicionPreviaje e ingreso como parametro edicion_previaje
resultado = calculaEdicionPreviaje(edicion_previaje)
print (f"Cantidad de viajes por Edición Previaje: 1ra Edición: {resultado[0]}, 2da Edición: {resultado[1]}, 3era Edición: {resultado[2]}")

etiquetas = ["Edicion 1", "Edicion 2", "Edicion 3"]
dibujar_grafico_torta("Porcentajes Ediciones Previajes", etiquetas, resultado)

# Crear objeto Provincia
provincia = Provincia("Santa Fe", (-31.6333, -60.7))
# print(str(provincia))

# Crear objeto Viaje
viaje = Viaje("Marzo", "Santa Fe", "Rio Negro", 24, 23000, "previaje 1")
# print(str(viaje))